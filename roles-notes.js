[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import React, { useState } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount((c) => c + 1)}>\n    Count: {count}\n  </button>\n};\nrender(<Counter />);","type":"code","id":"az9bh"},{"content":"test('it shows a button', () => {\n  render(<Counter />);\n\n  const button = screen.getByRole('button');\n\n  expect(\n    button\n  ).toBeInTheDocument();\n});\n","type":"code","id":"ngyzj"},{"content":"test('it doesnt show an input', () => {\n  render(<Counter />);\n\n  const input = screen.queryByRole('textbox');\n  \n  expect(\n    input\n  ).not.toBeInTheDocument();\n});\n","type":"code","id":"hgs1s"},{"content":"import { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\nimport UserForm from './UserForm';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\"> Link</a>\n      <button> Button </button>\n      <footer> Contentinfo </footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <imp alt=\"description\" /> Img\n      <input type=\"checkbox\" /> checkbox\n      <input type=\"number\" /> Spinbutton\n      <input type=\"radio\" /> radio\n      <input type=\"text\" /> Textbox\n      <li>Listitem</li>\n      <ul>List</ul>\n    </div>\n  );\n  rendre(<RoleExample/>)\n}","type":"code","id":"r74l5"},{"content":"function AccessibleName(){\r\n  return (\r\n    <div>\r\n    <button> Submit </button>\r\n    <button> Cancel </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<AccessibleName/>)","type":"code","id":"68gwf"},{"content":"test('can select by accessible name',()=>{\r\n  return (<AccessibleName/>);\r\n\r\n  const submitButton = screen.getByRole('button',{\r\n    name: '/submit/i'\r\n  });\r\n  const cancelButton = screen.getByRole('button',{\r\n    name: '/cancel/i'\r\n  });\r\n  expect(submitButton).toBeInTheDocument();\r\n  expect(cancelButton).toBeInTheDocument();\r\n})","type":"code","id":"nmpky"},{"content":"NOW COMES TO INPUT ELEMENT , ABOVE WE HAVE SEEN HOW TO IDENTITY SAME TAG SEPARATELY.","type":"text","id":"k41af"},{"content":"function MoreNames(){\r\n  return(\r\n    <div>\r\n    <label htmlFor=\"email\">Email</label>\r\n    <input id=\"email\"/>\r\n\r\n    <label htmlFor = \"search\">Search </label>\r\n    <input id= \"search\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nreturn(<MoreNames/>);","type":"code","id":"bhc1d"},{"content":"test('shows an email and search input',()=>{\r\n  return(<MoreNames/>);\r\n\r\n  const emailInput = screen.getByRole('textbox',{\r\n    name:/email/i\r\n  })\r\n  const searchInput = screen.getByRole('textbox',{\r\n    name: /search/i\r\n  });\r\n\r\n  expect(emailInput).toBeInTheDocument();\r\n  expect(searchInput).toBeInTheDocument();\r\n\r\n})","type":"code","id":"29v7t"},{"content":"Direactly Assigning an Accessible Name, button having icon no text","type":"text","id":"xzvpb"},{"content":"function IconButtons(){\r\n  return (\r\n    <div>\r\n    <button  aria-label = \"sign in\">\r\n    <svg/>\r\n    </button>\r\n\r\n    <button aria-label = \"sign out\">\r\n    <svg/>\r\n    </button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<IconButtons/>)","type":"code","id":"c9m8v"},{"content":"test('find elements bases on label',()=>{\r\n  render(<IconButtons/>);\r\n\r\n  const singInButton = screen.getByRole('button',{\r\n    name: /sign in/i\r\n  });\r\n\r\n  const singOutButton = screen.getByRole('button',{\r\n    name: /sign out/i\r\n  });\r\n\r\n  expect(singInButton).toBeInTheDocument();\r\n  expect(singOutButton).toBeInTheDocument();\r\n\r\n\r\n})","type":"code","id":"x35tm"},{"content":"Select Query","type":"text","id":"a67x3"},{"content":"import {screen, render} from '@testing-library/react';\r\n\r\nfunction ColorList(){\r\n  return(\r\n    <div>\r\n    <ul>\r\n    <li>red</li>\r\n    <li>Blue</li>\r\n    <li>Green</li>\r\n    </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<ColorList/>);","type":"code","id":"d85xm"},{"content":"test('check behaviour on 0 element of getBy, queryBy, findBy',async ()=>{\r\n  render(<ColorList/>);\r\n\r\n  expect(\r\n    ()=> screen.getByRole('textbox')\r\n  ).toThrow();\r\n\r\n  expect(\r\n    ()=>scree.queryByRole('textBox')\r\n  ).toEqual(null);\r\n\r\n  let errorThrow = false;\r\n  try{\r\n    await screen.findByRole('textbox')   //it will wait for 1 sec at will not able to find then throgh an error\r\n  }catch(err){\r\n    errorThrow = true;\r\n  }\r\n\r\n  expect(errorThrow).toEqual(true);\r\n\r\n\r\n});","type":"code","id":"97tm3"},{"content":"test('getBy , findBy , queryBy when there is 1 element', async ()=>{\r\n  render(<ColorList/>);\r\n\r\n  expect(\r\n    screen.getByRole('list')\r\n  ).toBeInTheDocument();\r\n\r\n  expect(\r\n    screen.queryByRole('list')\r\n  ).toBeInTheDocument();\r\n\r\n  expect(\r\n    await screen.findByRole('list')\r\n  ).toBeInTheDocument();\r\n\r\n});","type":"code","id":"td4ql"},{"content":"test('check behaviour on more then 1 element of getBy, queryBy, findBy',async ()=>{\r\n  render(<ColorList/>);\r\n\r\n  expect(\r\n    ()=> screen.getByRole('listitem')\r\n  ).toThrow();\r\n\r\n  expect(\r\n    ()=>scree.queryByRole('listitem')\r\n  ).toThrow();\r\n\r\n  let errorThrow = false;\r\n  try{\r\n    await screen.findByRole('listitem')   //it will wait for 1 sec at will not able to find then throgh an error\r\n  }catch(err){\r\n    errorThrow = true;\r\n  }\r\n\r\n  expect(errorThrow).toEqual(true);\r\n\r\n\r\n});","type":"code","id":"s0ppq"},{"content":"test('getallBy , queryAllBy , findAlBy',async ()=>{\r\n  render(<ColorList/>)\r\n\r\n  expect(\r\n    screen.getAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n\r\n  expect(\r\n    screen.queryAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n  expect(\r\n    await screen.findAllBy('listitem')\r\n  ).toHaveLength(3);\r\n})","type":"code","id":"3h96w"},{"content":"test('favor using getBy to prove an element exits',()=>{\r\n  render(<ColorList/>)\r\n  const element = screen.getByRole('list');\r\n\r\n  expect(element).toBeInTheDocument();\r\n\r\n});\r\n\r\ntest('favor queryBy to prove an element does not exits',() =>{\r\n  render(<ColorList/>);\r\n\r\n  const element = screen.queryByRole('textarea');\r\n\r\n  expect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"nyb0j"},{"content":"FindBy we use when there is api or fetching is required, we can't using get or query there as data come after sometime and get and query immediately test it and don't find it , and give error.\nwhere find wait for data to come-up for 1 sec.","type":"text","id":"onj09"},{"content":"import {useState, useEffect} from 'react';\r\n\r\nfunction fakeFetchColors(){\r\n  return Promise.resolve(\r\n    ['red','green','blue']\r\n  );\r\n\r\n}\r\n\r\nfunction LoadableColorList(){\r\n\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    fakeFetchColors().then(c=> setColors(c));\r\n  },[]);\r\n\r\n\r\n  const renderedColors = colors.map(color =>{\r\n    return <li key={color} >{color} </li>\r\n  });\r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList/>);","type":"code","id":"o5vuc"},{"content":"test('Favor findBy or FindAllBy when data fetching', async () =>{\r\n  render(<LoadableColorList />);\r\n\r\n  const els = await screen.findAllByRole('listitem');\r\n  expect(els).toHaveLength(3);\r\n});","type":"code","id":"xckvi"},{"content":"For form we need area-label","type":"text","id":"cebc0"},{"content":"import { render, screen } from '@testing-library/react';\r\n\r\nfunction FormData(){\r\n  return (\r\n    <div>\r\n    <button> Go Back</button>\r\n    <form aria-label =\"form\">\r\n    <button > Save </button>\r\n    <button > Cancel </button>\r\n    </form>\r\n    </div>\r\n  )\r\n\r\n};\r\n\r\nrender(<FormData />)","type":"code","id":"8utfx"},{"content":"test('the form displays 2 buttons',()=>{\r\n  render(<FormData/>);\r\n\r\n  const form = screen.getByRole('form');\r\n  const button = within(form).getAllByRole('button');\r\n\r\n  expect(button).toHaveLength(2);\r\n});","type":"code","id":"1ix5r"},{"content":"There is different way to do it by creating a customer matcher ","type":"text","id":"ko6rd"},{"content":"function toContainRole(form, role, quantity=1){\r\n  const elements = within(form).queryAllByRole(role);\r\n  if (elements.length === quantity){\r\n    return {\r\n      pass: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    pass: false,\r\n    message:() => `Expected to find ${quatity} ${role} elements. Found ${elements.length} instead. Found ${elements.length} instead.`\r\n  }\r\n  \r\n\r\n\r\n}\r\n\r\nexpect.extend({toContainRole});","type":"code","id":"16rjj"},{"content":"test('the form display 2 button with custum matcher',()=>{\r\n  render(<FormData/>);\r\n  const form = screen.getByRole('form');\r\n\r\n  expect(form).toContainRole('button',2);\r\n})","type":"code","id":"mq0pd"}]